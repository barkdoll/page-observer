"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;/**
 * A tiny JS module that utilizes MutationObservers to listen for DOM changes.
 * If the desired node is found, it executes the callback function you pass to it.
 *
 * It's original use case was for React, to help create a bridge for 
 * re-rendering (ReactDOM.render) to an element in legacy (multi-page) applications 
 * if the element to be rendered to was added/removed from the page.
 * 
 *
 * ReactDOM binds a root component in its "virtual DOM" to an actual DOM element and renders
 * its own application markup in place of that element. To use it with legacy sites where
 * many actual DOM mutations may happen frequently (by APIs such as jQuery and the native
 * DOM API), it can listen and find the element (via its CSS selector) and then run a callback
 * to initialize React— or whatever you'd like to do with a callback function.
 *
 *
 * The good news is the callback does not have to be React-related— it can be anything. 
 * So it's basically a mini-mini-framework for creating DOM mutation event listeners.
 *
 * @param selector string the CSS selector of the element you'd like to listen for
 * @param callback function the callback to be executed when @selector is found
 * @param observeAfterCB bool whether or not to keep observing for the element
 *                              after executing the callback
 */var pageObserver=function(a,b){var c=!(2<arguments.length&&arguments[2]!==void 0)||arguments[2],d=document.querySelector("body"),e={attributes:!0,childList:!0,subtree:!0// Watch child nodes for changes
};null!==document.querySelector(a)&&b();var f=new MutationObserver(function(d,e){var h=d.filter(function(a){return 0<a.addedNodes.length});if(!(0>=h.length)){var i=document.querySelector(a);null===i||(b(),e.disconnect(),c&&g(f))}});f.observe(d,e);var g=function(b){var c=new MutationObserver(function(c,f){var g=c.filter(function(a){return 0<a.removedNodes.length});if(!(0>=g.length)){var h=document.querySelector(a);null!==h||(f.disconnect(),b.observe(d,e))}});c.observe(d,e)}},_default=pageObserver;exports.default=_default;
